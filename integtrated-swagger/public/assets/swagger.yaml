swagger: '2.0'
info:
  version: 0.0.1
  title: Enterprise API
  description: Enterprise API
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
host: 'localhost:3001'
basePath: /api
tags:
  - name: Users
    description: API for users in the system
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    post:
      tags:
        - Users
      description: Create new user in system
      parameters:
        - name: user
          in: body
          description: User that we want to create
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: New user is created
          schema:
            $ref: '#/definitions/User'
    get:
      tags:
        - Users
      summary: Get all users in system
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Users'

  '/users/{userId}':
    parameters:
      - name: userId
        in: path
        required: true
        description: ID of user that we want to find
        type: number
    get:
      tags:
        - Users
      summary: Get user with given ID
      responses:
        '200':
          description: User is found
          schema:
            $ref: '#/definitions/User'
    delete:
      summary: Delete user with given ID
      tags:
        - Users
      responses:
        '200':
          description: User is deleted
          schema:
            $ref: '#/definitions/User'
    put:
      summary: Update user with give ID
      tags:
        - Users
      parameters:
        - name: user
          in: body
          description: User with new values of properties
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User is updated
          schema:
            $ref: '#/definitions/User'

  '/users/{userId}/books':
    parameters:
      - name: userId
        in: path
        required: true
        description: ID of user that we want to find
        type: number
    get:
      tags:
        - User's Books
      summary: Get all boosk of this user in system
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Books'

definitions:
  User:
    required:
      - email
      - id
    properties:
      id:
        type: number
        uniqueItems: true
      email:
        type: string
        uniqueItems: true
      lastName:
        type: string
      firstName:
        type: string

  Users:
    type: array
    items:
      $ref: '#/definitions/User'

  Book:
    properties:
      id:
        type: number
        uniqueItems: true
      label:
        type: string

  Books:
    type: array
    items:
      $ref: '#/definitions/Book'

